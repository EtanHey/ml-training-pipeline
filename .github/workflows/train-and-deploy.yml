name: Train and Deploy ML Model

on:
  push:
    branches: [main]
    paths:
      - 'training/**'
      - 'experiments/configs/**'
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Model type to train'
        required: true
        default: 'yolo'
        type: choice
        options:
          - yolo
          - transformers
          - custom
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'huggingface'
        type: choice
        options:
          - huggingface
          - runpod
          - both

env:
  PYTHON_VERSION: '3.10'

jobs:
  train:
    runs-on: ubuntu-latest
    outputs:
      model_path: ${{ steps.training.outputs.model_path }}
      metrics: ${{ steps.training.outputs.metrics }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run training
        id: training
        run: |
          python automation/scripts/train.py \
            --model-type ${{ github.event.inputs.model_type || 'yolo' }} \
            --config experiments/configs/default.yaml
          echo "model_path=$(cat /tmp/model_path.txt)" >> $GITHUB_OUTPUT
          echo "metrics=$(cat /tmp/metrics.json)" >> $GITHUB_OUTPUT

      - name: Upload model artifact
        uses: actions/upload-artifact@v3
        with:
          name: trained-model
          path: experiments/runs/*/best_model.*

      - name: Upload training logs
        uses: actions/upload-artifact@v3
        with:
          name: training-logs
          path: experiments/runs/*/logs/

  test:
    needs: train
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download model artifact
        uses: actions/download-artifact@v3
        with:
          name: trained-model

      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Run model tests
        run: |
          pytest tests/ -v --cov=training --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  deploy-huggingface:
    if: github.event.inputs.deploy_target == 'huggingface' || github.event.inputs.deploy_target == 'both'
    needs: [train, test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download model artifact
        uses: actions/download-artifact@v3
        with:
          name: trained-model
          path: ./models

      - name: Push to Hugging Face Hub
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          pip install huggingface-hub
          python automation/scripts/deploy_hf.py \
            --model-path ./models \
            --repo-name ${{ github.repository_owner }}/ml-model-${{ github.run_number }}

      - name: Deploy to Hugging Face Spaces
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          cd deployment/huggingface
          git init
          git add .
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "Deploy model from GitHub Actions"
          git push --force https://$HF_TOKEN@huggingface.co/spaces/${{ github.repository_owner }}/ml-inference main

  deploy-runpod:
    if: github.event.inputs.deploy_target == 'runpod' || github.event.inputs.deploy_target == 'both'
    needs: [train, test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download model artifact
        uses: actions/download-artifact@v3
        with:
          name: trained-model
          path: ./models

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./deployment/runpod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ml-inference:latest
            ${{ secrets.DOCKER_USERNAME }}/ml-inference:${{ github.sha }}
          build-args: |
            MODEL_TYPE=${{ github.event.inputs.model_type || 'yolo' }}

      - name: Deploy to RunPod
        env:
          RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        run: |
          cd deployment/runpod
          bash deploy.sh

  notify:
    needs: [deploy-huggingface, deploy-runpod]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        if: github.event_name == 'push'
        with:
          status: ${{ job.status }}
          text: |
            Deployment Status: ${{ job.status }}
            Model Type: ${{ github.event.inputs.model_type || 'yolo' }}
            Deploy Target: ${{ github.event.inputs.deploy_target || 'huggingface' }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}